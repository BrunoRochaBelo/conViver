.cv-button {
    font-family: var(--cv-font-family-sans-serif);
    font-weight: 600; /* Semibold */
    padding: var(--cv-spacing-sm) var(--cv-spacing-md);
    border-radius: var(--cv-border-radius-md);
    border: var(--cv-border-width) solid transparent;
    cursor: pointer;
    transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease, box-shadow 0.2s ease, transform 0.15s ease;
    text-align: center; /* Ensure text is centered */
    line-height: 1.5; /* Ensure text is vertically centered if button has fixed height */
    display: inline-flex; /* Allows aligning icon + text */
    align-items: center;
    justify-content: center;
    gap: var(--cv-spacing-xs); /* Space between icon and text */

    /* Default button styles */
    background-color: var(--current-button-default-bg);
    color: var(--current-button-default-text);
}
.cv-button:hover {
    background-color: var(--current-button-default-hover-bg);
    box-shadow: var(--current-shadow-sm);
}
.cv-button:active {
    transform: scale(0.97);
    box-shadow: none;
}

/* Primary Button */
.cv-button--primary {
    background-color: var(--current-button-primary-bg);
    color: var(--current-button-primary-text);
    border-color: var(--current-button-primary-bg); /* Keep border same color as bg for solid feel */
}
.cv-button--primary:hover {
    background-color: var(--current-button-primary-hover-bg);
    border-color: var(--current-button-primary-hover-bg);
    box-shadow: var(--current-shadow-sm);
}
.cv-button--primary:active {
    background-color: var(--current-button-primary-active-bg);
    border-color: var(--current-button-primary-active-bg);
    transform: scale(0.97);
    box-shadow: none;
}

/* Secondary Button */
.cv-button--secondary {
    background-color: var(--current-button-secondary-bg);
    color: var(--current-button-secondary-text);
    border-color: var(--current-button-secondary-bg);
}
.cv-button--secondary:hover {
    background-color: var(--current-button-secondary-hover-bg);
    border-color: var(--current-button-secondary-hover-bg);
    box-shadow: var(--current-shadow-sm);
}
.cv-button--secondary:active {
    background-color: var(--current-button-secondary-active-bg);
    border-color: var(--current-button-secondary-active-bg);
    transform: scale(0.97);
    box-shadow: none;
}

/* Danger Button */
.cv-button--danger {
    background-color: var(--current-button-danger-bg);
    color: var(--current-button-danger-text);
    border-color: var(--current-button-danger-bg);
}
.cv-button--danger:hover {
    background-color: var(--current-button-danger-hover-bg);
    border-color: var(--current-button-danger-hover-bg);
    box-shadow: var(--current-shadow-sm);
}
.cv-button--danger:active {
    background-color: var(--current-button-danger-active-bg);
    border-color: var(--current-button-danger-active-bg);
    transform: scale(0.97);
    box-shadow: none;
}


/* Icon Button Variant */
.cv-button--icon { /* Renamed from .cv-button.icon-button for consistency */
    padding: var(--cv-spacing-sm); /* Adjusted padding for icon buttons */
    width: auto; /* Allow width to be determined by content or specific sizing */
    min-width: 40px; /* Ensure a minimum touch target size */
    height: 40px; /* Consistent height */
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}
.cv-button--icon.has-indicator::after { /* Updated selector */
    content: "";
    position: absolute;
    top: 4px;
    right: 4px;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: var(--current-primary-blue); /* Or a specific indicator color variable */
}

/* Disabled state for ALL button variants */
.cv-button:disabled,
.cv-button[disabled] { /* Cover both attribute and class if used interchangeably */
    background-color: var(--current-button-disabled-bg) !important; /* Use important to override specifics */
    color: var(--current-button-disabled-text) !important;
    border-color: var(--current-button-disabled-border) !important;
    cursor: not-allowed !important;
    box-shadow: none !important;
    filter: none !important; /* Remove any filters like brightness */
    transform: none !important; /* Prevent active/hover transforms */
}


.cv-card {
    background-color: var(--current-card-bg); /* Use themed card background */
    border: var(--cv-border-width) solid var(--current-card-border); /* Use themed card border */
    border-radius: var(--cv-border-radius-lg);
    padding: var(--cv-spacing-md);
    margin-bottom: var(--cv-spacing-md);
    box-shadow: var(--current-card-shadow); /* Use themed card shadow */
    transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
}

.cv-card--clickable:hover {
    transform: translateY(-2px);
    box-shadow: var(--current-card-hover-shadow); /* Use themed hover shadow */
}

.cv-card__title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--current-text-primary);
    margin-bottom: var(--cv-spacing-sm);
}

.cv-card__subtitle {
    font-size: 0.9rem;
    color: var(--current-text-secondary);
    margin-bottom: var(--cv-spacing-md);
}

/* Generic grid layout for card collections */
.card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: var(--cv-spacing-md);
}

.cv-input {
    font-family: var(--cv-font-family-sans-serif);
    padding: var(--cv-spacing-sm) var(--cv-spacing-md);
    border: var(--cv-border-width) solid var(--current-border-color);
    border-radius: var(--cv-border-radius-md);
    font-size: 1rem;
    line-height: 1.5;
    background-color: var(--current-bg-element); /* Use themed element background */
    color: var(--current-text-primary);
    width: 100%;
    box-sizing: border-box;
    transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out, background-color 0.2s ease;
}
.cv-input::placeholder {
    color: var(--current-text-placeholder);
}
.cv-input:focus {
    border-color: var(--current-primary-blue);
    outline: 0;
    box-shadow: 0 0 0 3px var(--current-input-focus-shadow);
    background-color: var(--current-bg-element); /* Ensure background doesn't change on focus unless intended */
}

.cv-input--error {
    border-color: var(--current-semantic-error);
    background-color: var(--current-semantic-error-bg); /* Use themed error background */
}
.cv-input--error:focus {
    border-color: var(--current-semantic-error);
    box-shadow: 0 0 0 3px var(--current-input-error-focus-shadow); /* Use error focus shadow */
    background-color: var(--current-semantic-error-bg); /* Keep error bg on focus */
}
.cv-input--success {
    border-color: var(--current-semantic-success);
    background-color: var(--current-semantic-success-bg); /* Use themed success background */
}
.cv-input--success:focus {
    border-color: var(--current-semantic-success);
    box-shadow: 0 0 0 3px var(--current-input-success-focus-shadow); /* Use success focus shadow */
    background-color: var(--current-semantic-success-bg); /* Keep success bg on focus */
}

/* REMOVED .cv-modal__content from components.css to rely on .cv-modal-content in styles.css for consistency */
/*
.cv-modal__content {
    background-color: var(--current-bg-white);
    margin: 5% auto;
    padding: var(--cv-spacing-lg);
    border: none;
    width: 90%;
    max-width: 500px;
    border-radius: var(--cv-border-radius-lg);
    position: relative;
    box-shadow: var(--current-shadow-lg);
    animation-name: animatetop;
    animation-duration: 0.4s;
    animation-timing-function: ease-out;
}
@media (min-width: 768px) {
    .cv-modal__content {
        margin: 10% auto;
    }
}
*/

/* === Global Feedback Toast Styles === */
.global-feedback-container {
    position: fixed;
    top: var(--cv-spacing-md);
    right: var(--cv-spacing-md);
    z-index: 1050;
    display: flex;
    flex-direction: column;
    gap: var(--cv-spacing-sm);
    max-width: 350px;
}

.global-feedback-toast {
    background-color: var(--current-toast-bg); /* Use themed toast background */
    color: var(--current-text-primary);
    padding: var(--cv-spacing-md);
    border-radius: var(--cv-border-radius-md);
    box-shadow: var(--current-toast-shadow); /* Use themed toast shadow */
    display: flex;
    justify-content: space-between;
    align-items: center;
    opacity: 0;
    transform: translateX(100%);
    transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
    min-width: 280px; /* Minimum width */
    border-left: 5px solid transparent; /* For type indication */
}

.global-feedback-toast--visible {
    opacity: 1;
    transform: translateX(0);
}

.global-feedback-toast--hiding {
    opacity: 0;
    transform: translateX(110%); /* Move a bit further out when hiding */
}

.global-feedback-toast__close-btn {
    background: none;
    border: none;
    color: var(--current-toast-close-text); /* Use themed text color */
    font-size: 1.5rem;
    line-height: 1;
    padding: 0 var(--cv-spacing-xs);
    margin-left: var(--cv-spacing-md);
    cursor: pointer;
    transition: color 0.2s ease;
}

.global-feedback-toast__close-btn:hover {
    color: var(--current-toast-close-hover-text); /* Use themed hover text color */
}

/* Type-specific styles */
.global-feedback-toast--success {
    border-left-color: var(--current-semantic-success);
}
.global-feedback-toast--error {
    border-left-color: var(--current-semantic-error);
}
.global-feedback-toast--warning {
    border-left-color: var(--current-semantic-warning);
}
.global-feedback-toast--info {
    border-left-color: var(--current-semantic-info);
}
/* === End Global Feedback Toast Styles === */

/* === Alert Component Styles === */
.cv-alert {
    padding: var(--cv-spacing-md);
    margin-bottom: var(--cv-spacing-md);
    border: var(--cv-border-width) solid transparent;
    border-radius: var(--cv-border-radius-md);
    font-size: 0.9rem;
    text-align: left;
}

.cv-alert--error {
    color: var(--current-alert-error-text);
    background-color: var(--current-alert-error-bg);
    border-color: var(--current-alert-error-text); /* Border usually matches text color for stronger emphasis */
}

.cv-alert--success {
    color: var(--current-alert-success-text);
    background-color: var(--current-alert-success-bg);
    border-color: var(--current-alert-success-text);
}

.cv-alert--warning {
    color: var(--current-alert-warning-text);
    background-color: var(--current-alert-warning-bg);
    border-color: var(--current-alert-warning-text);
}

.cv-alert--info {
    color: var(--current-alert-info-text);
    background-color: var(--current-alert-info-bg);
    border-color: var(--current-alert-info-text);
}

/* Utility class to hide alerts when needed */
.cv-alert--hidden {
    display: none;
}
/* === End Alert Component Styles === */

@keyframes animatetop {
    from {top: -300px; opacity: 0}
    to {top: 0; opacity: 1}
}

.cv-modal__close {
    color: var(--current-text-placeholder); /* Was --cv-gray-500 */
    /* Consider using an SVG icon or a styled '×' */
}
.cv-modal__close:hover,
.cv-modal__close:focus {
    color: var(--current-text-primary);
}
.cv-modal__title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--current-text-primary);
    margin-bottom: var(--cv-spacing-md);
}

.cv-header {
    background-color: var(--current-header-bg); /* Use themed header background */
    -webkit-backdrop-filter: blur(20px) saturate(180%);
    backdrop-filter: blur(20px) saturate(180%);
    color: var(--current-text-primary);
    padding: var(--cv-spacing-sm) var(--cv-spacing-md);
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid var(--current-header-border); /* Use themed header border */
    position: sticky;
    top: 0;
    z-index: 1020;
}
.cv-header__container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
}

/* Dark theme for header is handled by --current-header-bg and --current-header-border */

@media (min-width: 768px) {
    .cv-header {
        padding: var(--cv-spacing-md) var(--cv-spacing-lg);
        flex-wrap: nowrap;
    }
}
.cv-header__title {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
}
@media (min-width: 768px) {
    .cv-header__title {
        font-size: 1.5rem;
    }
}

.cv-nav {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    width: 100%;
    gap: var(--cv-spacing-xs);
    background-color: var(--current-nav-bg); /* Use themed nav background */
    -webkit-backdrop-filter: blur(18px) saturate(170%); /* Keep blur if desired, or remove if nav is opaque */
    backdrop-filter: blur(18px) saturate(170%);
    padding: var(--cv-spacing-sm) var(--cv-spacing-md);
    border-bottom: 1px solid var(--current-border-subtle); /* Use themed border */
    /* position: sticky; ... z-index: 1010; */ /* Keep if nav is sticky */
}
.cv-nav__list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    gap: var(--cv-spacing-sm);
}

/* Dark theme for nav is handled by --current-nav-bg and --current-border-subtle */

.cv-nav__link {
    color: var(--current-text-primary);
    text-decoration: none;
    font-weight: 500; /* Normal to 500 for slightly more emphasis */
    display: flex;
    align-items: center;
    width: 100%;
    text-align: left;
    padding: var(--cv-spacing-sm);
    border-radius: var(--cv-border-radius-md);
    transition: background-color 0.2s ease, color 0.2s ease, transform 0.1s ease;
    gap: var(--cv-spacing-xs);
}
.cv-nav__icon {
    width: 20px;
    height: 20px;
    display: inline-block;
    vertical-align: middle;
    /* Add fill/stroke: currentColor if using SVGs that should inherit text color */
    /* fill: currentColor; */
}
.cv-nav__label {
    line-height: 1;
}
@media (min-width: 768px) {
    .cv-nav {
        flex-direction: row;
        align-items: center;
        width: auto;
        gap: var(--cv-spacing-sm);
        /* border-bottom: none; */ /* Optional: remove border on desktop if header has one */
    }
    .cv-nav__link {
        display: inline-block;
        width: auto;
        text-align: center;
        padding: var(--cv-spacing-sm) var(--cv-spacing-md);
    }
}
.cv-nav__link:hover {
    background-color: var(--current-nav-item-hover-bg); /* Use themed hover background */
    color: var(--current-primary-blue); /* Keep link color change on hover */
}

.cv-nav__link--active {
    background-color: var(--current-nav-item-active-bg); /* Use themed active background */
    color: var(--current-nav-item-active-text) !important; /* Use themed active text color */
    font-weight: 600;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); /* Generic shadow, theming might be complex here */
}
.cv-nav__link--active:hover {
    background-color: var(--current-nav-item-active-bg); /* Keep active background */
    filter: brightness(95%); /* Slightly darken active item on hover */
    color: var(--current-nav-item-active-text) !important; /* Keep active text color */
}

/* Responsive Table Wrapper */
.cv-table-responsive-wrapper {
    overflow-x: auto;
    width: 100%;
    margin-bottom: var(--cv-spacing-md); /* Space below scrollable table */
}

/* Apply to actual <table> elements, ensure it can be overridden for specific table needs */
.cv-table {
    width: 100%; /* Default to full width within its container */
    border-collapse: collapse; /* Common practice */
    /* min-width: 600px; */ /* Example: if table content is wide, forces scrollbar. */
}

/* Utility Classes for Responsiveness */
.hide-on-mobile {
    display: none !important;
}
@media (min-width: 768px) {
    .hide-on-mobile {
        display: block !important; /* Or appropriate display type */
    }
}

.hide-on-desktop {
    display: block !important; /* Or appropriate display type */
}
@media (min-width: 768px) {
    .hide-on-desktop {
        display: none !important;
    }
}

/* User avatar button */
.user-avatar {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: var(--current-button-primary-bg); /* Use themed button background */
    color: var(--current-button-primary-text); /* Use themed button text color */
    font-weight: 600;
    text-transform: uppercase;
    overflow: hidden;
    border: 1.5px solid var(--current-button-primary-bg); /* Match background for solid feel */
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}
.user-avatar:hover {
    transform: scale(1.1);
    box-shadow: 0 0 8px var(--current-input-focus-shadow); /* Use themed focus shadow for glow */
}
.user-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 50%; /* Ensure image inside is also rounded if not already */
}

/* User menu modal overrides */
.user-menu-modal .cv-modal-content {
    padding: var(--cv-spacing-md);
    max-width: 300px;
    /* Animation and shadow are inherited from .cv-modal-content in styles.css */
}
.user-menu-list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: var(--cv-spacing-sm);
}
.user-menu-list button.cv-button { /* Ensure specificity if needed */
    width: 100%;
    justify-content: flex-start; /* Align text to left for menu items */
}

/* Skeleton Screen Components */
.feed-skeleton-container {
    /* JS managed */
}

.feed-skeleton-item {
    background-color: var(--current-card-bg); /* Use themed card background */
    border: var(--cv-border-width) solid var(--current-card-border); /* Use themed card border */
    border-radius: var(--cv-border-radius-lg);
    padding: var(--cv-spacing-md);
    margin-bottom: var(--cv-spacing-md);
    box-shadow: var(--current-card-shadow); /* Use themed card shadow */
    position: relative;
    overflow: hidden;
}

.skeleton-block {
    background-color: var(--current-skeleton-bg);
    border-radius: var(--cv-border-radius-sm);
    margin-bottom: var(--cv-spacing-sm);
}
.skeleton-block:last-child {
    margin-bottom: 0;
}

.skeleton-title {
    width: 60%;
    height: 1.25rem;
    margin-bottom: var(--cv-spacing-md);
}

.skeleton-line {
    width: 100%;
    height: 0.875rem;
}
.skeleton-line--short {
    width: 75%;
}
.skeleton-line--medium {
    width: 90%;
}
.skeleton-line--long {
    width: 100%;
}

.skeleton-image {
    width: 100%;
    aspect-ratio: 16 / 9;
    margin-bottom: var(--cv-spacing-sm);
}

.skeleton-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: var(--cv-spacing-sm);
    float: left; /* Or use flexbox for layout */
}
.skeleton-block-group { /* For grouping avatar and text lines */
    display: flex;
    flex-direction: column;
    /* If used with avatar: display: flex; align-items: center; then nested div for text lines */
}

/* Shimmer Animation */
.feed-skeleton-item::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background: linear-gradient(
        90deg,
        transparent,
        var(--current-skeleton-shimmer-color),
        transparent
    );
    transform: translateX(-100%);
    animation: skeleton-shimmer 1.5s infinite;
}

@keyframes skeleton-shimmer {
    0% { transform: translateX(-100%); }
    50% { transform: translateX(100%); }
    100% { transform: translateX(100%); } /* Hold at end for a moment if desired, or loop back to -100% */
}

/* === Status Badge Utility Classes === */
.status-badge {
    display: inline-flex;
    align-items: center;
    gap: 4px;
    font-size: 0.75rem; /* Slightly smaller */
    font-weight: 600; /* Semibold */
    padding: 3px 8px; /* Adjusted padding */
    border-radius: var(--cv-border-radius-md); /* More rounded, consistent with buttons */
    line-height: 1.2; /* Ensure text fits well */
}
.status-icon { /* If using actual icons (SVG, font icon) */
    font-size: 0.9em; /* Relative to badge font size */
    line-height: 1;
}
/* Using text emojis as icons for simplicity, ensure they render well */
.status-icon.icon-success::before { content: "✓"; margin-right: 2px; } /* Simpler checkmark */
.status-icon.icon-warning::before { content: "!";  margin-right: 2px; } /* Simpler warning */
.status-icon.icon-danger::before { content: "✕";  margin-right: 2px; } /* Simpler cross */

.status-badge--success {
    background-color: var(--current-semantic-success-bg);
    color: var(--current-semantic-success);
}
.status-badge--warning {
    background-color: var(--current-semantic-warning-bg);
    color: var(--current-semantic-warning);
}
.status-badge--danger {
    background-color: var(--current-semantic-error-bg);
    color: var(--current-semantic-error);
}
/* === End Status Badge Utility Classes === */

/* === Progress Bar Component === */
.cv-progress {
    width: 100%;
    height: 12px;
    background-color: var(--current-border-subtle);
    border-radius: var(--cv-border-radius-lg);
    overflow: hidden;
    display: none;
    margin-top: var(--cv-spacing-md);
    margin-bottom: var(--cv-spacing-sm);
    box-shadow: inset 0 1px 2px rgba(0,0,0,0.075);
}

.cv-progress__bar {
    height: 100%;
    width: 0%;
    background-color: var(--current-primary-blue);
    transition: width 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border-radius: var(--cv-border-radius-lg); /* Match parent for consistent rounding */
    box-shadow: inset 0 -1px 0 rgba(0,0,0,0.1);
}
/* === End Progress Bar Component === */

/* === Inline Spinner Utility === */
.inline-spinner {
    display: inline-block;
    width: 1em; /* Relative to parent font size */
    height: 1em;
    border: 0.15em solid currentColor; /* Thinner border relative to size */
    border-right-color: transparent;
    border-radius: 50%;
    animation: cv-inline-spin 0.75s linear infinite;
    margin-left: 0.3em; /* Adjusted spacing */
    vertical-align: -0.125em; /* Fine-tune vertical alignment */
}

@keyframes cv-inline-spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

/* ==========================================================================
   Empty State & Error State Components (Already in styles.css, ensure consistency)
   Moved from components.css to styles.css to be alongside other page-level structures.
   If these are truly global components, components.css is fine.
   The existing definitions in styles.css are more detailed and should be preferred.
   Ensure variable usage is consistent:
   e.g., var(--current-border-color) vs var(--current-border-subtle) for the dashed border.
   e.g., var(--current-bg-element) vs var(--current-background-alt) for background.
   ========================================================================== */

/*
.cv-empty-state,
.cv-error-state {
    ...
}
*/
/* Styles for these are now primarily in styles.css, ensure they use the latest current-theme variables */
