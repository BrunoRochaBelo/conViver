.cv-button {
    /* ... existing display, text-align, etc. ... */
    font-family: var(--cv-font-family-sans-serif);
    font-weight: 600; /* Changed from 500 to use OpenSansSemibold */
    padding: var(--cv-spacing-sm) var(--cv-spacing-md); /* e.g., 8px 16px */
    border-radius: var(--cv-border-radius-md); /* e.g., 8px */
    border: var(--cv-border-width) solid transparent;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out, border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out, transform 0.15s ease-in-out;
    background-color: var(--current-button-default-bg);
    color: var(--current-text-primary);
}
.cv-button:hover {
    background-color: var(--current-button-default-hover-bg);
    box-shadow: var(--current-shadow-sm);
}
.cv-button:active {
    transform: scale(0.97);
    box-shadow: none;
}
.cv-button--primary {
    background-color: var(--current-primary-blue);
    color: var(--current-text-on-primary);
    border-color: var(--current-primary-blue);
}
.cv-button--primary:hover {
    /* For hover on primary, typically a slightly darker shade of its current color.
       This requires either predefined darker shades for both light/dark primary blue,
       or using filter: brightness(90%); which is simpler. Let's try filter. */
    filter: brightness(90%);
    box-shadow: var(--current-shadow-sm);
}
.cv-button--primary:active {
    filter: brightness(80%); /* Even darker for active */
    transform: scale(0.97);
    box-shadow: none; /* Keep box-shadow none for primary active */
}
/* Add similar updates for --secondary, --danger, --info, :disabled states */
/* Example for a generic secondary button, if it exists, or other variants */
.cv-button--secondary {
    background-color: var(--current-button-secondary-bg);
    color: var(--current-text-on-primary); /* Assuming secondary buttons also have light text */
    border-color: var(--current-button-secondary-bg);
}
.cv-button--secondary:hover {
    background-color: var(--current-button-secondary-hover-bg);
    border-color: var(--current-button-secondary-hover-bg);
    box-shadow: var(--current-shadow-sm);
}
.cv-button--secondary:active {
    filter: brightness(90%); /* Similar to primary, slightly darker on active */
    transform: scale(0.97);
    box-shadow: none;
}

.cv-button:disabled,
.cv-button--primary:disabled,
.cv-button--secondary:disabled {
    background-color: var(--current-button-disabled-bg);
    color: var(--current-button-disabled-text);
    cursor: not-allowed;
    border-color: var(--current-button-disabled-border);
    box-shadow: none;
    filter: none; /* Ensure no brightness filter on disabled state */
}

.cv-card {
    background-color: var(--current-bg-white);
    border: var(--cv-border-width) solid var(--current-border-color);
    border-radius: var(--cv-border-radius-lg);
    padding: var(--cv-spacing-md);
    margin-bottom: var(--cv-spacing-md);
    box-shadow: var(--current-shadow-md);
    transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
}

.cv-card--clickable:hover {
    transform: translateY(-2px);
    box-shadow: var(--current-shadow-lg);
}

.cv-card__title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--current-text-primary);
    margin-bottom: var(--cv-spacing-sm);
}

.cv-card__subtitle {
    font-size: 0.9rem;
    color: var(--current-text-secondary);
    margin-bottom: var(--cv-spacing-md);
}

.cv-input {
    font-family: var(--cv-font-family-sans-serif);
    padding: var(--cv-spacing-sm) var(--cv-spacing-md);
    border: var(--cv-border-width) solid var(--current-border-color);
    border-radius: var(--cv-border-radius-md);
    font-size: 1rem;
    line-height: 1.5;
    background-color: var(--current-bg-white);
    color: var(--current-text-primary);
    width: 100%;
    box-sizing: border-box;
    transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}
.cv-input::placeholder {
    color: var(--current-text-placeholder);
}
.cv-input:focus {
    border-color: var(--current-primary-blue);
    outline: 0;
    box-shadow: 0 0 0 3px var(--current-input-focus-shadow);
}

.cv-input--error {
    border-color: var(--current-semantic-error);
    background-color: var(--current-color-error-bg);
}
.cv-input--error:focus {
    border-color: var(--current-semantic-error);
    /* Assuming --current-input-focus-shadow is adaptable or we need a semantic error focus shadow */
    box-shadow: 0 0 0 3px var(--current-input-focus-shadow); /* This might need adjustment if focus shadow is always blue */
}
.cv-input--success {
    border-color: var(--current-semantic-success);
    background-color: var(--current-color-success-bg);
}
.cv-input--success:focus {
    border-color: var(--current-semantic-success);
    /* Assuming --current-input-focus-shadow is adaptable or we need a semantic success focus shadow */
    box-shadow: 0 0 0 3px var(--current-input-focus-shadow); /* This might need adjustment */
}

.cv-modal__content {
    background-color: var(--current-bg-white);
    margin: 5% auto;
    padding: var(--cv-spacing-lg);
    border: none;
    width: 90%;
    max-width: 500px;
    border-radius: var(--cv-border-radius-lg);
    position: relative;
    box-shadow: var(--current-shadow-lg);
    animation-name: animatetop;
    animation-duration: 0.4s;
    animation-timing-function: ease-out;
}
@media (min-width: 768px) {
    .cv-modal__content {
        margin: 10% auto;
    }
}

/* === Global Feedback Toast Styles === */
.global-feedback-container {
    position: fixed;
    top: var(--cv-spacing-md, 16px); /* Use CSS variable or fallback */
    right: var(--cv-spacing-md, 16px);
    z-index: 1050; /* Ensure it's above most other content */
    display: flex;
    flex-direction: column;
    gap: var(--cv-spacing-sm, 8px);
    max-width: 350px; /* Or whatever width is desired */
}

.global-feedback-toast {
    background-color: var(--current-bg-white, #fff);
    color: var(--current-text-primary, #333);
    padding: var(--cv-spacing-md, 16px);
    border-radius: var(--cv-border-radius-md, 8px);
    box-shadow: var(--current-shadow-lg, 0 4px 12px rgba(0,0,0,0.15));
    display: flex;
    justify-content: space-between;
    align-items: center;
    opacity: 0;
    transform: translateX(100%);
    transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
    min-width: 280px; /* Minimum width */
    border-left: 5px solid transparent; /* For type indication */
}

.global-feedback-toast--visible {
    opacity: 1;
    transform: translateX(0);
}

.global-feedback-toast--hiding {
    opacity: 0;
    transform: translateX(110%); /* Move a bit further out when hiding */
}

.global-feedback-toast__close-btn {
    background: none;
    border: none;
    color: var(--current-text-secondary, #777);
    font-size: 1.5rem;
    line-height: 1;
    padding: 0 var(--cv-spacing-xs, 4px);
    margin-left: var(--cv-spacing-md, 16px);
    cursor: pointer;
    transition: color 0.2s ease;
}

.global-feedback-toast__close-btn:hover {
    color: var(--current-text-primary, #333);
}

/* Type-specific styles */
/* Using existing semantic color variables where appropriate */
.global-feedback-toast--success {
    border-left-color: var(--current-semantic-success, green);
    /* background-color: var(--current-color-success-bg, #e6fffa); */ /* Optional: subtle background */
}
.global-feedback-toast--success .global-feedback-toast__close-btn {
    /* color: var(--current-semantic-success, green); */ /* Optional: themed close button */
}

.global-feedback-toast--error {
    border-left-color: var(--current-semantic-error, red);
    /* background-color: var(--current-color-error-bg, #ffe6e6); */
}

.global-feedback-toast--warning {
    border-left-color: var(--current-semantic-warning, orange);
    /* background-color: var(--current-color-warning-bg, #fff0e6); */
}

.global-feedback-toast--info {
    border-left-color: var(--current-semantic-info, blue);
    /* background-color: var(--current-color-info-bg, #e6f7ff); */
}
/* === End Global Feedback Toast Styles === */

/* === Alert Component Styles === */
.cv-alert {
    padding: var(--cv-spacing-md); /* 16px */
    margin-bottom: var(--cv-spacing-md); /* 16px */
    border: var(--cv-border-width) solid transparent;
    border-radius: var(--cv-border-radius-md); /* 8px */
    font-size: 0.9rem;
    text-align: left; /* Default to left, can be overridden */
}

.cv-alert--error {
    color: var(--current-semantic-error);
    background-color: var(--current-color-error-bg);
    border-color: var(--current-semantic-error);
}

.cv-alert--success {
    color: var(--current-semantic-success);
    background-color: var(--current-color-success-bg);
    border-color: var(--current-semantic-success);
}

.cv-alert--warning {
    color: var(--current-semantic-warning);
    background-color: var(--current-color-warning-bg);
    border-color: var(--current-semantic-warning);
}

.cv-alert--info {
    color: var(--current-semantic-info);
    background-color: var(--current-color-info-bg);
    border-color: var(--current-semantic-info);
}
/* === End Alert Component Styles === */

@keyframes animatetop {
    from {top: -300px; opacity: 0}
    to {top: 0; opacity: 1}
}

.cv-modal__close {
    color: var(--current-text-placeholder); /* Was --cv-gray-500 */
    /* Consider using an SVG icon or a styled 'Ã—' */
}
.cv-modal__close:hover,
.cv-modal__close:focus {
    color: var(--current-text-primary);
}
.cv-modal__title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--current-text-primary);
    margin-bottom: var(--cv-spacing-md);
}

.cv-header {
    background-color: var(--current-bg-white);
    color: var(--current-text-primary);
    padding: var(--cv-spacing-sm) var(--cv-spacing-md);
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    border-bottom: var(--cv-border-width) solid var(--current-border-color);
}
@media (min-width: 768px) {
    .cv-header {
        padding: var(--cv-spacing-md) var(--cv-spacing-lg); /* Desktop padding */
        flex-wrap: nowrap;
    }
}
.cv-header__title {
    margin: 0;
    font-size: 1.5rem; /* Mobile title size */
    font-weight: 600;
}
@media (min-width: 768px) {
    .cv-header__title {
        font-size: 1.75rem; /* Desktop title size */
    }
}

.cv-nav {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    width: 100%;
    gap: var(--cv-spacing-xs);
    background-color: var(--current-nav-bg); /* Was --cv-gray-100 */
    padding: var(--cv-spacing-sm) var(--cv-spacing-md);
    border-bottom: var(--cv-border-width) solid var(--current-border-color);
}
.cv-nav__link {
    color: var(--current-text-link);
    text-decoration: none;
    font-weight: normal; /* Was 500, OpenSans has no 500. Use normal for non-active links. */
    display: block; /* Make links take full width for easier tapping */
    width: 100%;
    text-align: left;
    padding: var(--cv-spacing-sm); /* Larger padding for easier tapping */
    border-radius: var(--cv-border-radius-sm);
    transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out, transform 0.2s ease-in-out;
}
@media (min-width: 768px) {
    .cv-nav {
        flex-direction: row;
        align-items: center;
        width: auto; /* Revert to auto width for desktop */
        gap: var(--cv-spacing-sm); /* Restore original gap */
        /* padding: var(--cv-spacing-sm) var(--cv-spacing-md); /* Ensure this is suitable or adjust */
    }
    .cv-nav__link {
        display: inline-block; /* Revert for desktop */
        width: auto;
        text-align: center; /* Or left, depending on design */
        padding: var(--cv-spacing-xs) var(--cv-spacing-sm); /* Restore original padding */
    }
}
.cv-nav__link:hover {
    background-color: var(--current-bg-element); /* Was --cv-gray-200, now maps to element bg */
    color: var(--current-primary-blue);
    transform: translateY(-1px);
}
.cv-nav__link--active {
    background-color: var(--current-primary-blue);
    color: var(--current-text-on-primary);
    font-weight: 600;
}
.cv-nav__link--active:hover {
    filter: brightness(90%); /* Similar to primary button hover */
}

/* Responsive Table Wrapper */
.cv-table-responsive-wrapper {
    overflow-x: auto;
    width: 100%;
    margin-bottom: var(--cv-spacing-md); /* Space below scrollable table */
}

/* Apply to actual <table> elements, ensure it can be overridden for specific table needs */
.cv-table {
    width: 100%; /* Default to full width within its container */
    border-collapse: collapse; /* Common practice */
    /* min-width: 600px; */ /* Example: if table content is wide, forces scrollbar.
                              This should be set based on table content, or on specific table instances.
                              Avoid setting a global min-width here unless all tables are complex. */
}

/* Utility Classes for Responsiveness */
.hide-on-mobile {
    display: none !important; /* Use !important to ensure override if needed, use sparingly */
}
@media (min-width: 768px) { /* Tablet and up */
    .hide-on-mobile {
        display: block !important; /* Or flex, inline, etc., as appropriate to restore */
    }
}

.hide-on-desktop {
    display: block !important; /* Or flex, etc. */
}
@media (min-width: 768px) { /* Tablet and up */
    .hide-on-desktop {
        display: none !important;
    }
}
